{
  "specs": {},
  "functional_spec_count": {},
  "testsuites": [
    {
      "cases": [
        {
          "classname": "testCases.test_login",
          "name": "test_homePageTitle",
          "developer": "-",
          "test_description": "",
          "status": "Failed",
          "logs": "<ul style='list-style-type: none; padding: 0;'></ul>",
          "details": "Message: assert False\nDetails: self = <testCases.test_login.Test_001_Login object at 0x000001FE444B9CD0>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7d2ce94fe41f4e2759ec8759e9898463\")>\n\n    def test_homePageTitle(self, setup):\n        # inside this method create driver\n        self.driver=setup\n        self.driver.get(self.baseURL)\n        act_title = self.driver.title\n        if act_title == \"nopCommerce demo store. Login12\":\n            assert True\n    \n        else:\n            self.driver.save_screenshot(\".\\\\Screenshots\\\\\"+\"test_homePageTitle.png\")\n            self.driver.close()\n>           assert False\nE           assert False\n\ntestCases\\test_login.py:24: AssertionError",
          "functional_specifications": [],
          "categories": []
        },
        {
          "classname": "testCases.test_login",
          "name": "test_login",
          "developer": "-",
          "test_description": "",
          "status": "Failed",
          "logs": "<ul style='list-style-type: none; padding: 0;'></ul>",
          "details": "Message: selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidsessionidexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff78a2178d5+2802741]\n\tGetHandleVerifier [0x0x7ff789f7eb70+79568]\n\t(No symbol) [0x0x7ff789d1bf2c]\n\t(No symbol) [0x0x7ff789d62dbf]\n\t(No symbol) [0x0x7ff789d9ab52]\n\t(No symbol) [0x0x7ff789d95663]\n\t(No symbol) [0x0x7ff789d94729]\n\t(No symbol) [0x0x7ff789ce6fd5]\n\tGetHandleVerifier [0x0x7ff78a242ced+2979917]\n\tGetHandleVerifier [0x0x7ff78a23d0f3+2956371]\n\tGetHandleVerifier [0x0x7ff78a25acbd+3078173]\n\tGetHandleVerifier [0x0x7ff789f9836e+184014]\n\tGetHandleVerifier [0x0x7ff789fa024f+216495]\n\t(No symbol) [0x0x7ff789ce5fd1]\n\tGetHandleVerifier [0x0x7ff78a35e1a8+4140296]\n\tBaseThreadInitThunk [0x0x7ff920bf54e0+16]\n\tRtlUserThreadStart [0x0x7ff921bc485b+43]\nDetails: self = <testCases.test_login.Test_001_Login object at 0x000001FE44465340>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"50adbcd42c3828566b917cb1ed965f19\")>\n\n    def test_login(self, setup):\n        self.driver = setup\n        self.driver.get(self.baseURL)\n        self.lp = LoginPage(self.driver)\n        self.lp.setUserName(self.username)\n        self.lp.setPassword(self.password)\n        self.lp.clickLogin()\n        act_title = self.driver.title\n        self.driver.close()\n        if act_title== \"Dashboard / nopCommerce administration12\":\n            assert  True\n    \n        else:\n>           self.driver.save_screenshot(\".\\\\Screenshots\\\\\"+\"test_login.png\")\n\ntestCases\\test_login.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1025: in save_screenshot\n    return self.get_screenshot_as_file(filename)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1000: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1034: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1044: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FE44507350>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...78a35e1a8+4140296]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff920bf54e0+16]\\\\n\\\\tRtlUserThreadStart [0x0x7ff921bc485b+43]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidsessionidexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff78a2178d5+2802741]\nE       \tGetHandleVerifier [0x0x7ff789f7eb70+79568]\nE       \t(No symbol) [0x0x7ff789d1bf2c]\nE       \t(No symbol) [0x0x7ff789d62dbf]\nE       \t(No symbol) [0x0x7ff789d9ab52]\nE       \t(No symbol) [0x0x7ff789d95663]\nE       \t(No symbol) [0x0x7ff789d94729]\nE       \t(No symbol) [0x0x7ff789ce6fd5]\nE       \tGetHandleVerifier [0x0x7ff78a242ced+2979917]\nE       \tGetHandleVerifier [0x0x7ff78a23d0f3+2956371]\nE       \tGetHandleVerifier [0x0x7ff78a25acbd+3078173]\nE       \tGetHandleVerifier [0x0x7ff789f9836e+184014]\nE       \tGetHandleVerifier [0x0x7ff789fa024f+216495]\nE       \t(No symbol) [0x0x7ff789ce5fd1]\nE       \tGetHandleVerifier [0x0x7ff78a35e1a8+4140296]\nE       \tBaseThreadInitThunk [0x0x7ff920bf54e0+16]\nE       \tRtlUserThreadStart [0x0x7ff921bc485b+43]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException",
          "functional_specifications": [],
          "categories": []
        }
      ]
    }
  ],
  "test_environment": "Development",
  "timestamp": "25 Aug 2025, 18:48",
  "img_url": "https://icon.icepanel.io/Technology/svg/pytest.svg",
  "test_status": "complete",
  "report_title": "pytest HTML Report",
  "category_count": {},
  "all_categories": []
}