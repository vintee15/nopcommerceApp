{
  "specs": {},
  "functional_spec_count": {},
  "testsuites": [
    {
      "cases": [
        {
          "classname": "testCases.test_login",
          "name": "test_homePageTitle",
          "developer": "-",
          "test_description": "",
          "status": "Failed",
          "logs": "<ul style='list-style-type: none; padding: 0;'></ul>",
          "details": "Message: AssertionError: Expected title did not match. Got: nopCommerce demo store. Login\nassert 'nopCommerce ... store. Login' == 'nopCommerce ...store. Login1'\n  \n  \u001b[0m\u001b[91m- nopCommerce demo store. Login1\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n  ?                              -\u001b[90m\u001b[39;49;00m\n  \u001b[92m+ nopCommerce demo store. Login\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\nDetails: self = <testCases.test_login.Test_001_Login object at 0x000001FEDC1DD820>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bb15b90a4d0b0c7852a8638d5e75043b\")>\n\n    def test_homePageTitle(self, setup):\n        # inside this method create driver\n    \n        self.logger.info(\" ******* Test_001_Login *******\")\n        self.logger.info(\" ******* verifying home page title *******\")\n        self.driver=setup\n        self.driver.get(self.baseURL)\n        act_title = self.driver.title\n        if act_title != \"nopCommerce demo store. Login\":\n            self.driver.save_screenshot(\".\\\\Screenshots\\\\test_homePageTitle.png\")\n        self.logger.info(\" ******* home page title is failed *******\")\n>       assert act_title == \"nopCommerce demo store. Login1\", f\"Expected title did not match. Got: {act_title}\"\nE       AssertionError: Expected title did not match. Got: nopCommerce demo store. Login\nE       assert 'nopCommerce ... store. Login' == 'nopCommerce ...store. Login1'\nE         \nE         \u001b[0m\u001b[91m- nopCommerce demo store. Login1\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\nE         ?                              -\u001b[90m\u001b[39;49;00m\nE         \u001b[92m+ nopCommerce demo store. Login\u001b[39;49;00m\u001b[90m\u001b[39;49;00m\n\ntestCases\\test_login.py:34: AssertionError",
          "functional_specifications": [],
          "categories": []
        },
        {
          "classname": "testCases.test_login",
          "name": "test_login",
          "developer": "-",
          "test_description": "",
          "status": "Failed",
          "logs": "<ul style='list-style-type: none; padding: 0;'></ul>",
          "details": "Message: assert False\nDetails: self = <testCases.test_login.Test_001_Login object at 0x000001FEDC264380>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2af3e7cdfaa008f10c6d6d5c9d54abfd\")>\n\n    def test_login(self, setup):\n         self.driver = setup\n         self.logger.info(\" ******* verify login test *******\")\n         self.driver.get(self.baseURL)\n         self.lp = LoginPage(self.driver)\n         self.lp.setUserName(self.username)\n         self.lp.setPassword(self.password)\n         self.lp.clickLogin()\n         act_title = self.driver.title\n         # self.driver.close()\n         if act_title== \"Dashboard / nopCommerce administration12\":\n             assert  True\n             self.logger.info(\" ******* login test is passed *******\")\n         else:\n            self.driver.save_screenshot(\".\\\\Screenshots\\\\\" + \"test_login.png\")\n            # self.driver.save_screenshot(\".\\\\Screenshots\\\\\"+\"test_login.png\")\n            self.logger.info(\" ******* home page title is failed*******\")\n>           assert False\nE           assert False\n\ntestCases\\test_login.py:63: AssertionError",
          "functional_specifications": [],
          "categories": []
        }
      ]
    }
  ],
  "test_environment": "Development",
  "timestamp": "27 Aug 2025, 20:02",
  "img_url": "https://icon.icepanel.io/Technology/svg/pytest.svg",
  "test_status": "complete",
  "report_title": "pytest HTML Report",
  "category_count": {},
  "all_categories": []
}